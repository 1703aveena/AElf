// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: test_contract.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using aelf = global::AElf.Types.CSharp;

namespace AElf.Runtime.CSharp3.Tests.TestContract {
  public static partial class TestContractContainer
  {
    static readonly string __ServiceName = "TestContract";

    static readonly aelf::Marshaller<global::AElf.Runtime.CSharp3.Tests.TestContract.IncrementInput> __Marshaller_IncrementInput = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::AElf.Runtime.CSharp3.Tests.TestContract.IncrementInput.Parser.ParseFrom);
    static readonly aelf::Marshaller<global::AElf.Runtime.CSharp3.Tests.TestContract.IncrementOutput> __Marshaller_IncrementOutput = aelf::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::AElf.Runtime.CSharp3.Tests.TestContract.IncrementOutput.Parser.ParseFrom);

    static readonly aelf::Method<global::AElf.Runtime.CSharp3.Tests.TestContract.IncrementInput, global::AElf.Runtime.CSharp3.Tests.TestContract.IncrementOutput> __Method_Increment = new aelf::Method<global::AElf.Runtime.CSharp3.Tests.TestContract.IncrementInput, global::AElf.Runtime.CSharp3.Tests.TestContract.IncrementOutput>(
        aelf::MethodType.Action,
        __ServiceName,
        "Increment",
        __Marshaller_IncrementInput,
        __Marshaller_IncrementOutput);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::AElf.Runtime.CSharp3.Tests.TestContract.TestContractReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for the contract of TestContract</summary>
    public abstract partial class TestContractBase : AElf.Sdk.CSharp.CSharpSmartContract<AElf.Runtime.CSharp3.Tests.TestContract.TestContractState>
    {
      public virtual global::AElf.Runtime.CSharp3.Tests.TestContract.IncrementOutput Increment(global::AElf.Runtime.CSharp3.Tests.TestContract.IncrementInput request)
      {
        throw new global::System.NotImplementedException();
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static aelf::ServerServiceDefinition BindService(TestContractBase serviceImpl)
    {
      return aelf::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Increment, serviceImpl.Increment).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(aelf::ServiceBinderBase serviceBinder, TestContractBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Increment, serviceImpl.Increment);
    }

  }
}
#endregion
