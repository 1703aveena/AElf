using System.Collections.Generic;

namespace AElf.Kernel.Concurrency
{
    /// <summary>
    /// The Metadata will not be changed after they are calculated as long as the related contracts don't update.
    /// Thus for each function, we store the whole set of metadata (which generated by accessing function's metadata recursively according to calling_set)
    /// When the contracts update, the metadata of related contracts' functions must be updated accordingly.
    /// </summary>
    public class FunctionMetadata
    {
        public FunctionMetadata(HashSet<string> callingSet, HashSet<Hash> pathSet, HashSet<Hash> nonRecursivePathSet)
        {
            CallingSet = callingSet ?? new HashSet<string>();
            PathSet = pathSet ?? new HashSet<Hash>();
            NonRecursivePathSet = nonRecursivePathSet ?? new HashSet<Hash>();
        }

        /// <summary>
        /// used to find influenced contract when a contract is updated
        /// </summary>
        public HashSet<string> CallingSet { get; }

        public HashSet<Hash> PathSet { get; }
        
        public HashSet<Hash> NonRecursivePathSet { get; }
    }
}